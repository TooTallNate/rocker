#!/bin/bash
set -euo pipefail

if [ "$EUID" -ne 0 ]; then
  exec sudo -E "$0" "$@"
fi

c() {
  tput "$@" 2>/dev/null ||:
}
BOLD="$(c bold)"
GREY="$(c setaf 0)"
NO_COLOR="$(c sgr0)"

# Print out the currently bound ports from running docker
# containers in a syntax compatible with `ssh -L`
server__get_ports() {
  set -euo pipefail
  ids="$(docker ps --quiet)"
  if [ ! -z "${ids}" ]; then
    echo "${ids}" | xargs -L 1 docker port | awk '{print $3}'
  fi
}

# Establishes the reverse `sshfs` tunnel (https://superuser.com/a/918708/41354)
server__create_sshfs() {
  set -euo pipefail
  mountpoint="/mnt/sshfs/${ssh_hostname}/"
  mkdir -p "${mountpoint}" 2>/dev/null ||:
  sudo umount "${mountpoint}" 2>/dev/null ||:
  echo "Mounting local filesystem at ${mountpoint}"

  # https://askubuntu.com/a/980257/403009
  # https://serverfault.com/a/132973/294389
  ssh_command="ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR"

  # `allow_root` is required since dockerd runs as root
  exec sshfs \
    -f \
    -o allow_root \
    -o reconnect \
    -o ssh_command="${ssh_command}" \
    -p "${sshd_port}" \
    "127.0.0.1:/" "${mountpoint}"
}

# Print to stderr when `DEBUG` env var is set, and append to the logfile
debug() {
  if [ ! -z "${debug_mode}" ]; then
    echo "${BOLD}${GREY}>${NO_COLOR}" "$@" >&2
  fi
  if [ -z "${NO_LOGFILE:-}" ]; then
    echo "$@" >>"${logfile}"
  fi
}

# Extract the hostname's ssh_config %C hash since the `port` file
# uses the same name, and the socket control file also gets chown'd
get_hostname_hash() {
  ssh -F ~/.ssh/config -G -S "%C" "$1" | grep controlpath | head -n1 | awk '{print $2}'
}

debug_mode="${DEBUG:-}"
rocker_dir="$HOME/.rocker"
logfile="${rocker_dir}/rockerd.log"
hostname="${1:-}"
if [ -z "${hostname}" ]; then
  echo "FATAL: An SSH hostname is required!" >&2
  exit 2
fi
shift

hostname_hash="$(get_hostname_hash "${hostname}")"
control_socket_dir="${rocker_dir}/connections"
control_socket="${control_socket_dir}/%C.sock"
port_dir="${rocker_dir}/ports"
port_file="${port_dir}/${hostname_hash}"

# Exits 0 if dependency is present in $PATH, or 1 if not
has_dep() {
  hash "$@" </dev/null >/dev/null 2>&1
}

dockerd_get() {
  local endpoint="$1"
  shift
  curl --fail --silent --show-error "127.0.0.1:$(cat "${port_file}")/v1.18/${endpoint}" "$@"
}

get_ports() {
  if has_dep jq; then
    dockerd_get containers/json | \
      jq -r '.[].Ports[] | select(.Type = "tcp") | .IP + ":" + (.PublicPort|tostring)'
  else
    ssh -S "${control_socket}" -F ~/.ssh/config "${hostname}" "$(fn server__get_ports)"
  fi
}

forward_port() {
  local host=
  local port=
  if echo "$2" | grep ':' >/dev/null; then
    host="$(echo "$2" | awk -F: '{print $1}')"
    port="$(echo "$2" | awk -F: '{print $2}')"
  else
    host="0.0.0.0"
    port="$2"
  fi
  ssh -O "$1" -L "${host}:${port}:127.0.0.1:${port}" -S "${control_socket}" -F ~/.ssh/config "${hostname}"
}

publish_port() {
  forward_port forward "$1"
}

unpublish_port() {
  forward_port cancel "$1"
}

is_connected() {
  ssh -O check -S "${control_socket}" -F ~/.ssh/config "${hostname}" </dev/null >/dev/null 2>&1
}

# https://stackoverflow.com/a/6943581/376773
port_in_use() {
  printf "\035" | nc 127.0.0.1 "$1" </dev/null >/dev/null 2>&1
}

get_unused_port() {
  for port in $(seq "$(shuf -i 2000-65000 -n 1)" 65000);
  do
    port_in_use "${port}" || echo "$port" && break;
  done
}

fn() {
  declare -f "$1" | tail -n +3 | sed '$ d'
}

# https://en.wikibooks.org/wiki/OpenSSH/Cookbook/Multiplexing#Port_Forwarding_After_the_Fact
monitor_ports() {
  local ports=
  local previous_ports=
  while is_connected; do
    #echo "Checking published docker container ports"
    ports="$(get_ports ||:)"

    for port in ${ports}; do
      if ! echo "${previous_ports}" | grep "${port}" >/dev/null; then
        echo "Publishing port ${port}"
        publish_port "${port}" ||:
      fi
    done

    for port in ${previous_ports}; do
      if ! echo "${ports}" | grep "${port}" >/dev/null; then
        echo "Unpublishing port ${port}"
        unpublish_port "${port}" ||:
      fi
    done

    previous_ports="${ports}"
    sleep 5
  done
  echo "Control socket is no longer running, stopping monitoring ports"
  rm -f "${port_file}" ||:
}

if [ ! -z "${1:-}" ]; then
  if fn "$1" >/dev/null; then
    # direct function invocation
    r=0
    "$@" || r=$?
    exit "$r"
  else
    echo "ERROR: \"$1\" is not a valid sub-command" >&2
    exit 2
  fi
fi

# https://stackoverflow.com/a/18622662/376773
if is_connected; then
  NO_LOGFILE=1 debug "rockerd daemon is already running for ${hostname}"
  cat "${port_file}"
  exit 0
fi

owner="${SUDO_USER}:$(sudo -u "${SUDO_USER}" id -Gn | awk '{print $1}')"
mkdir -p "${control_socket_dir}" "${port_dir}"
chown "${owner}" "${control_socket_dir}" "${port_dir}"
chmod 700 "${control_socket_dir}" "${port_dir}"

touch "${logfile}"
chown "${owner}" "${logfile}"

debug "Establishing SSH control socket to ${hostname}"
ssh -fN -M -S "${control_socket}" -o UserKnownHostsFile=~/.ssh/known_hosts -F ~/.ssh/config "${hostname}" </dev/null >>"${logfile}" 2>&1
chown "${owner}" "$(echo "${control_socket}" | sed "s/\%C/${hostname_hash}/")"

# Unfortunately, `ssh -L` does not support specifying 0 for an ephemeral port,
# so an unused port is first determined and then used in the ssh call afterwards.
# https://superuser.com/q/919808/41354
docker_port="$(get_unused_port)"
ssh -O forward -L "127.0.0.1:${docker_port}:127.0.0.1:2375" -S "${control_socket}" -F ~/.ssh/config "${hostname}"
debug "Port forwarding remote dockerd port 2375 to local port ${docker_port}"
echo "${docker_port}" > "${port_file}"
chown "${owner}" "${port_file}"

sshd_port="$(ssh -O forward -R "127.0.0.1:0:127.0.0.1:${ROCKER_SSH_PORT:-22}" -S "${control_socket}" -F ~/.ssh/config "${hostname}")"
debug "Port forwarding local sshd to remote port ${sshd_port}"

ssh_hostname="$(hostname | tr '[:upper:]' '[:lower:]')"

sshfs_script="ssh_hostname=\"${ssh_hostname}\""$'\n'"sshd_port=\"${sshd_port}\""$'\n'"$(fn server__create_sshfs)"
#echo "${sshfs_script}"

ssh \
  -S "${control_socket}" \
  -F ~/.ssh/config \
  "${hostname}" \
  "${sshfs_script}" </dev/null >>"${logfile}" 2>&1 &
disown -h

debug "Monitoring published ports"
monitor_ports </dev/null >>"${logfile}" 2>&1 &
disown -h

# All done! Let `rocker` know which port to use
echo "${docker_port}"
