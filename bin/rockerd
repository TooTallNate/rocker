#!/bin/bash
set -euo pipefail

# Allow to be invoked without `sudo`, so upgrade to root first
if [ "$EUID" -ne 0 ]; then
  exec sudo -E "$0" "$@"
fi

c() {
  tput "$@" 2>/dev/null ||:
}
BOLD="$(c bold)"
GREY="$(c setaf 0)"
NO_COLOR="$(c sgr0)"

# Print out the currently bound ports from running docker
# containers in a syntax compatible with `ssh -L`
server__get_ports() {
  set -euo pipefail
  ids="$(docker ps --quiet)"
  if [ ! -z "${ids}" ]; then
    echo "${ids}" | xargs -L 1 docker port | awk '{print $3}'
  fi
}

# Establishes the reverse `sshfs` tunnel (https://superuser.com/a/918708/41354)
server__create_sshfs() {
  set -euo pipefail
  mountpoint="/mnt/sshfs/${ssh_hostname}/"
  mkdir -p "${mountpoint}" 2>/dev/null ||:
  fusermount -u "${mountpoint}" 2>/dev/null ||:
  echo "Mounting local filesystem at ${mountpoint}"

  # https://askubuntu.com/a/980257/403009
  # https://serverfault.com/a/132973/294389
  ssh_command="ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR"

  # `allow_root` is required since dockerd runs as root
  exec sshfs \
    -f \
    -o allow_root \
    -o reconnect \
    -o idmap=user \
    -o ssh_command="${ssh_command}" \
    -p "${sshd_port}" \
    "${ssh_username}@127.0.0.1:/" "${mountpoint}"
}

# Print to stderr when `DEBUG` env var is set, and append to the logfile
debug() {
  if [ ! -z "${debug_mode}" ]; then
    echo "${BOLD}${GREY}>${NO_COLOR}" "$@" >&2
  fi
  if [ -z "${NO_LOGFILE:-}" ]; then
    echo "$@" >>"${logfile}"
  fi
}

# Extract the hostname's ssh_config %C hash since the `port` file
# uses the same name, and the socket control file also gets chown'd
get_hostname_hash() {
  ssh -F ~/.ssh/config -G -S "%C" "$1" | grep controlpath | head -n1 | awk '{print $2}'
}

# Strip the `ssh://` prefix, if present
parse_host() {
  local url="$(sed 's|ssh://||' <<< "$1")"
  hostname="$(awk -F: '{print $1}' <<< "$url")"
  local sock="$(awk -F: '{print $2}' <<< "$url")"
  if [ ! -z "$sock" ]; then
    remote_docker_sock="$sock"
  fi
}

# Where the `docker.sock` file lives on the remote machine
remote_docker_sock="/var/run/docker.sock"

if [ ! -z "${DOCKER_HOST:-}" ]; then
  parse_host "${DOCKER_HOST}"
fi

debug_mode="${DEBUG:-}"
rocker_dir="$HOME/.rocker"
logfile="${rocker_dir}/rockerd.log"

# Parse argv
args=()
while [ $# -gt 0 ]; do
  case "$1" in
    -H=*|--host=*) parse_host "${1#*=}"; shift 1;;
    -H|--host) parse_host "${2}"; shift 2;;
    *) args+=("${1}"); shift 1;;
  esac
done

if [ "${#args[@]}" -gt 0 ]; then
  subcommand="${args[0]}"
  args=("${args[@]:1}")
else
  subcommand="dockersock"
fi

if [ -z "${hostname:-}" ]; then
  echo "FATAL: An SSH hostname is required!" >&2
  exit 2
fi

hostname_hash="$(get_hostname_hash "${hostname}")"
hostname_dir="${rocker_dir}/${hostname_hash}"
ssh_socket="${rocker_dir}/%C/ssh.sock"
docker_sock="${hostname_dir}/docker.sock"

# Exits 0 if dependency is present in $PATH, or 1 if not
has_dep() {
  hash "$@" </dev/null >/dev/null 2>&1
}

dockerd_get() {
  local endpoint="$1"
  shift
  exec curl --fail --silent --show-error \
    --unix-socket "${docker_sock}" \
    "http://localhost/v1.18/${endpoint}" "$@"
}

get_ports() {
  if has_dep jq; then
    jq -r '.[].Ports[] | select(.Type = "tcp") | select(.PublicPort != null) | .IP + ":" + (.PublicPort|tostring)' \
      < <(dockerd_get containers/json)
  else
    ssh -S "${ssh_socket}" -F ~/.ssh/config "${hostname}" "$(fn server__get_ports)"
  fi
}

forward_port() {
  local host=
  local port=
  if echo "$2" | grep ':' >/dev/null; then
    host="$(echo "$2" | awk -F: '{print $1}')"
    port="$(echo "$2" | awk -F: '{print $2}')"
  else
    host="0.0.0.0"
    port="$2"
  fi
  ssh -O "$1" -L "${host}:${port}:127.0.0.1:${port}" -S "${ssh_socket}" -F ~/.ssh/config "${hostname}"
}

is_connected() {
  ssh -O check -S "${ssh_socket}" -F ~/.ssh/config "${hostname}" </dev/null >/dev/null 2>&1
}

fn() {
  declare -f "$1" | tail -n +3 | sed '$ d'
}

# Monitors the dockerd daemon for "network" events related to port forwarding.
# This function is meant to be read one-line at a time with `read -r`.
wait_for_network_events() {
  # `date` forces an immediate ports check upon startup
  date
  if has_dep jq; then
    while IFS='' read -r line; do
      action="$(echo "$line" | jq -r '.Action')"
      if [ "${action}" = "start" -o "${action}" = "destroy" ]; then
        echo "$line"
      fi
    done < <(dockerd_get events --no-buffer)
  else
    # fall back to polling
    while is_connected; do
      sleep 5
      date
    done
  fi
}

# https://en.wikibooks.org/wiki/OpenSSH/Cookbook/Multiplexing#Port_Forwarding_After_the_Fact
monitor_ports() {
  local ports=
  local previous_ports=
  while IFS='' read -r line; do
    echo "Checking published docker container ports"
    ports="$(get_ports ||:)"

    for port in ${ports}; do
      if ! grep "${port}" <<< "${previous_ports}" >/dev/null; then
        echo "Publishing port ${port}"
        forward_port forward "${port}" ||:
      fi
    done

    for port in ${previous_ports}; do
      if ! grep "${port}" <<< "${ports}" >/dev/null; then
        echo "Unpublishing port ${port}"
        forward_port cancel "${port}" ||:
      fi
    done

    previous_ports="${ports}"
  done < <(exec -a "rockerd: docker events monitor" bash "$0" wait_for_network_events) ||:
  echo "Control socket is no longer running, cleaning upâ€¦"
  rm -rf "${hostname_dir}"
}

# Sub-commands
port() {
  local action="${1:-}"
  shift
  if [ "${action}" = "publish" ]; then
    action="forward"
  elif [ "${action}" = "unpublish" ]; then
    action="cancel"
  fi
  forward_port "${action}" "$@"
  # TODO: add/remove from an explicit forwards file
}

dockersock() {
  echo "${docker_sock}"
}

run_ssh() {
  exec ssh -S "${ssh_socket}" \
      -o UserKnownHostsFile=~/.ssh/known_hosts \
      -F ~/.ssh/config \
      ${ssh_options:-} \
      "${hostname}" "$@"
}
# End of sub-commands

if is_connected; then
  NO_LOGFILE=1 debug "rockerd daemon is already running for ${hostname}"
else
  owner="${SUDO_USER}:$(sudo -u "${SUDO_USER}" id -Gn | awk '{print $1}')"

  if [ ! -d "${rocker_dir}" ]; then
    mkdir -p "${rocker_dir}"
    chown "${owner}" "${rocker_dir}"
  fi

  mkdir -p "${hostname_dir}"
  chown "${owner}" "${hostname_dir}"

  touch "${logfile}"
  chown "${owner}" "${logfile}"

  debug "Establishing SSH control socket to ${hostname}"
  ssh -fN -M -A -S "${ssh_socket}" -o UserKnownHostsFile=~/.ssh/known_hosts -F ~/.ssh/config "${hostname}" </dev/null >>"${logfile}" 2>&1
  chown "${owner}" "$(echo "${ssh_socket}" | sed "s/\%C/${hostname_hash}/")"

  # Forward the `/var/run/docker.sock` Unix socket file from the server to local
  debug "Forwarding remote '${remote_docker_sock}' to local '${docker_sock}'"
  ssh -O forward -L "${docker_sock}:${remote_docker_sock}" -S "${ssh_socket}" -F ~/.ssh/config "${hostname}"
  chown "${owner}" "${docker_sock}"

  sshd_port="$(ssh -O forward -R "127.0.0.1:0:127.0.0.1:${ROCKER_SSH_PORT:-22}" -S "${ssh_socket}" -F ~/.ssh/config "${hostname}")"
  debug "Port forwarding local sshd to remote port ${sshd_port}"

  ssh_hostname="$(hostname | tr '[:upper:]' '[:lower:]')"

  sshfs_script="ssh_username=\"${SUDO_USER}\""$'\n'"ssh_hostname=\"${ssh_hostname}\""$'\n'"sshd_port=\"${sshd_port}\""$'\n'"$(fn server__create_sshfs)"

  exec -a "rockerd: sshfs volume mount" ssh \
    -A \
    -S "${ssh_socket}" \
    -F ~/.ssh/config \
    "${hostname}" \
    bash <<< "${sshfs_script}" >>"${logfile}" 2>&1 &
  disown -h

  debug "Monitoring published ports"
  exec -a "rockerd: port publisher" bash "$0" monitor_ports </dev/null >>"${logfile}" 2>&1 &
  disown -h
fi

# Run the sub-command
if [ "${subcommand}" = "ssh" ]; then
  subcommand="run_ssh"
fi
if fn "${subcommand}" >/dev/null; then
  # https://stackoverflow.com/a/7577209/376773
  "${subcommand}" ${args[@]+"${args[@]}"}
else
  echo "ERROR: \"${subcommand}\" is not a valid sub-command" >&2
  exit 2
fi
