#!/bin/bash
set -euo pipefail
c() {
  tput "$@" 2>/dev/null ||:
}
BOLD="$(c bold)"
GREY="$(c setaf 0)"
NO_COLOR="$(c sgr0)"

# Print out the currently bound ports from running docker
# containers in a syntax compatible with `ssh -L`
server__get_ports() {
  set -euo pipefail
  ids="$(docker ps --quiet)"
  if [ ! -z "${ids}" ]; then
    echo "${ids}" | xargs -L 1 docker port | awk '{print $3}' | awk -F: '{print $1 ":" $2 ":127.0.0.1:" $2}'
  fi
}

# Establishes the main SSH connection with Docker TCP local port forward as
# well as the reverse `sshfs` tunnel (https://superuser.com/a/918708/41354)
server__create_sshfs() {
  set -euo pipefail
  mountpoint="/mnt/sshfs/${ssh_hostname}/"
  mkdir -p "${mountpoint}" 2>/dev/null ||:
  sudo umount "${mountpoint}" 2>/dev/null ||:
  echo "Mounting local filesystem at ${mountpoint}"

  # https://askubuntu.com/a/980257/403009
  # https://serverfault.com/a/132973/294389
  ssh_command="ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR"

  # `allow_root` is required since dockerd runs as root
  exec sshfs \
    -f \
    -o allow_root \
    -o reconnect \
    -o ssh_command="${ssh_command}" \
    -p "${sshd_port}" \
    "127.0.0.1:/" "${mountpoint}"
}

# This is basically an emulation of the `%C` ssh formatter, but we need
# to calculate the value ourselves since the same hash will be used
# for the `ports` file
get_hostname_hash() {
  local config="$(ssh -F ~/.ssh/config -G "$1")"
  local localhostname="$(hostname)"
  local hostname="$(echo "${config}" | grep hostname | head -n1 | awk '{print $2}')"
  local port="$(echo "${config}" | grep port | head -n1 | awk '{print $2}')"
  local user="$(echo "${config}" | grep user | head -n1 | awk '{print $2}')"
  printf "${localhostname}${user}${hostname}${port}" | sha1sum | awk '{print $1}'
}

debug_mode="${DEBUG:-}"
hostname="$1"
hostname_hash="$(get_hostname_hash "${hostname}")"
rocker_dir="$HOME/.rocker"
logfile="${rocker_dir}/rockerd.log"
control_socket_dir="${rocker_dir}/connections"
control_socket="${control_socket_dir}/${hostname_hash}.sock"

# print to stderr when `DEBUG` env var is set, and also log to the logfile
debug() {
  if [ ! -z "${debug_mode}" ]; then
    echo "${BOLD}${GREY}>${NO_COLOR}" "$@" >&2
  fi
  if [ -z "${NO_LOGFILE:-}" ]; then
    echo "$@" >>"${logfile}"
  fi
}

is_connected() {
  ssh -O check -S "${control_socket}" -F ~/.ssh/config "${hostname}" </dev/null >/dev/null 2>&1
}

fn() {
  declare -f "$1" | tail -n +3 | sed '$ d'
}

# https://en.wikibooks.org/wiki/OpenSSH/Cookbook/Multiplexing#Port_Forwarding_After_the_Fact
publish_ports() {
  local ports=
  local previous_ports=
  while is_connected; do
    #echo "Checking published docker container ports"
    ports="$(ssh -S "${control_socket}" -F ~/.ssh/config "${hostname}" "$(fn server__get_ports)" ||:)"

    for port in ${ports}; do
      if ! echo "${previous_ports}" | grep "${port}" >/dev/null; then
        echo "Publishing port ${port}"
        ssh -O forward -L "${port}" -S "${control_socket}" -F ~/.ssh/config "${hostname}" ||:
      fi
    done

    for port in ${previous_ports}; do
      if ! echo "${ports}" | grep "${port}" >/dev/null; then
        echo "Unpublishing port ${port}"
        ssh -O cancel -L "${port}" -S "${control_socket}" -F ~/.ssh/config "${hostname}" ||:
      fi
    done

    previous_ports="${ports}"
    sleep 5
  done
  echo "Control socket is no longer running, stopping monitoring ports"
}

# https://stackoverflow.com/a/18622662/376773
if is_connected; then
  NO_LOGFILE=1 debug "rockerd daemon is already running for ${hostname}"
  exit 0
fi

owner="${SUDO_USER}:$(sudo -u "${SUDO_USER}" id -Gn | awk '{print $1}')"
mkdir -p "${control_socket_dir}"
chown "${owner}" "${control_socket_dir}"
chmod 700 "${control_socket_dir}"

touch "${logfile}"
chown "${owner}" "${logfile}"

debug "Establishing SSH control socket to ${hostname}"
ssh -fN -M -S "${control_socket}" -o UserKnownHostsFile=~/.ssh/known_hosts -F ~/.ssh/config "${hostname}" </dev/null >>"${logfile}" 2>&1
chown "${owner}" "${control_socket}"

ssh -O forward -L "127.0.0.1:2375:127.0.0.1:2375" -S "${control_socket}" -F ~/.ssh/config "${hostname}"
debug "Port forwarding remote dockerd to local port 2375"

sshd_port="$(ssh -O forward -R "127.0.0.1:0:127.0.0.1:${ROCKER_SSH_PORT:-22}" -S "${control_socket}" -F ~/.ssh/config "${hostname}")"
debug "Port forwarding local sshd to remote port ${sshd_port}"

ssh_hostname="$(hostname | tr '[:upper:]' '[:lower:]')"

sshfs_script="ssh_hostname=\"${ssh_hostname}\""$'\n'"sshd_port=\"${sshd_port}\""$'\n'"$(fn server__create_sshfs)"
#echo "${sshfs_script}"

ssh \
  -S "${control_socket}" \
  -F ~/.ssh/config \
  "${hostname}" \
  "${sshfs_script}" </dev/null >>"${logfile}" 2>&1 &
disown -h

debug "Monitoring published ports"
publish_ports </dev/null >>"${logfile}" 2>&1 &
disown -h
