#!/bin/bash
set -euo pipefail
BOLD="$(tput bold 2>/dev/null || true)"
GREY="$(tput setaf 0 2>/dev/null || true)"
NO_COLOR="$(tput sgr0 2>/dev/null || true)"

# Print out the currently bound ports from running docker
# containers in a syntax compatible with `ssh -L`
server__get_ports() {
  set -euo pipefail
  ids="$(docker ps --quiet)"
  if [ ! -z "${ids}" ]; then
    echo "${ids}" | xargs -L 1 docker port | awk '{print $3}' | awk -F: '{print $1 ":" $2 ":127.0.0.1:" $2}'
  fi
}

# Establishes the main SSH connection with Docker TCP local port forward as
# well as the reverse `sshfs` tunnel (https://superuser.com/a/918708/41354)
server__create_sshfs() {
  set -euo pipefail
  mountpoint="/mnt/sshfs/${LC_HOSTNAME}/"
  mkdir -p "${mountpoint}" 2>/dev/null ||:
  sudo umount "${mountpoint}" 2>/dev/null ||:
  echo "Mounting local filesystem at ${mountpoint}"

  # https://askubuntu.com/a/980257/403009
  # https://serverfault.com/a/132973/294389
  ssh_command="ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR"

  # `allow_root` is required since dockerd runs as root
  exec sshfs \
    -f \
    -o allow_root \
    -o reconnect \
    -o ssh_command="${ssh_command}" \
    -p "${LC_SSHD_PORT}" \
    "127.0.0.1:/" "${mountpoint}"
}

debug_mode="${DEBUG:-}"
hostname="$1"
rocker_dir="$HOME/.rocker"
logfile="${rocker_dir}/rockerd.log"
control_socket_dir="${rocker_dir}/connections"
control_socket="${control_socket_dir}/%C.sock"

# print to stderr when `DEBUG` env var is set, and also log to the logfile
debug() {
  if [ ! -z "${debug_mode}" ]; then
    echo "${BOLD}${GREY}>${NO_COLOR}" "$@" >&2
  fi
  echo "$@" >>"${logfile}"
}

is_connected() {
  ssh -O check -S "${control_socket}" "${hostname}" </dev/null >/dev/null 2>&1
}

fn() {
  declare -f "$1" | tail -n +3 | sed '$ d'
}

# https://en.wikibooks.org/wiki/OpenSSH/Cookbook/Multiplexing#Port_Forwarding_After_the_Fact
publish_ports() {
  local ports=
  local previous_ports=
  while is_connected; do
    #echo "Checking published docker container ports"
    ports="$(ssh -S "${control_socket}" "${hostname}" "$(fn server__get_ports)" ||:)"

    for port in ${ports}; do
      if ! echo "${previous_ports}" | grep "${port}" >/dev/null; then
        echo "Publishing port ${port}"
        ssh -O forward -L "${port}" -S "${control_socket}" "${hostname}" ||:
      fi
    done

    for port in ${previous_ports}; do
      if ! echo "${ports}" | grep "${port}" >/dev/null; then
        echo "Unpublishing port ${port}"
        ssh -O cancel -L "${port}" -S "${control_socket}" "${hostname}" ||:
      fi
    done

    previous_ports="${ports}"
    sleep 5
  done
  echo "Control socket is no longer running, stopping monitoring ports"
}

# https://stackoverflow.com/a/18622662/376773
if is_connected; then
  debug "rockerd daemon is already running for ${hostname}"
  exit 0
fi

mkdir -p "${control_socket_dir}"
chmod 700 "${control_socket_dir}"

debug "Establishing SSH control socket to ${hostname}"
ssh -fN -M -S "${control_socket}" "${hostname}"

ssh -O forward -L "127.0.0.1:2375:127.0.0.1:2375" -S "${control_socket}" "${hostname}"
debug "Port forwarding remote dockerd to local port 2375"

# `LC_` prefix because it's a whitelisted prefix
# in most `sshd_config` files by default
# https://superuser.com/a/163228/41354
LC_SSHD_PORT="$(ssh -O forward -R "127.0.0.1:0:127.0.0.1:${ROCKER_SSH_PORT:-22}" -S "${control_socket}" "${hostname}")"
export LC_SSHD_PORT
debug "Port forwarding local sshd to remote port ${LC_SSHD_PORT}"

LC_HOSTNAME="$(hostname | tr '[:upper:]' '[:lower:]')"
export LC_HOSTNAME

ssh \
  -o SendEnv=LC_HOSTNAME \
  -o SendEnv=LC_SSHD_PORT \
  -S "${control_socket}" \
  "${hostname}" \
  "$(fn server__create_sshfs)" </dev/null >>"${logfile}" 2>&1 &
disown -h

debug "Monitoring published ports"
publish_ports </dev/null >>"${logfile}" 2>&1 &
disown -h
